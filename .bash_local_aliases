#!/bin/bash
# shellcheck source=/dev/null disable=2155 disable=2207 disable=2142
# vi: ft=sh ts=2 sw=2

# functions and aliases, loaded on session start.
# By using meaningful one-line comments to functions, they'll get nicely printed
# by means of the 'my_commands' help function (defined in ~/.bashrc)

BOLD=$(tput bold)
BLUECOLOR=$(tput setaf 4)
REDCOLOR=$(tput setaf 1)
GREENCOLOR=$(tput setaf 2)
BLUECOLOR_BOLD=$BLUECOLOR$BOLD
REDCOLOR_BOLD=$REDCOLOR$BOLD
GREENCOLOR_BOLD=$GREENCOLOR$BOLD
ENDCOLOR=$(tput sgr0)

green() {
  echo -e "${GREENCOLOR_BOLD}$*${ENDCOLOR}"
}

blue() {
  echo -e "${BLUECOLOR_BOLD}$*${ENDCOLOR}"
}

red() {
  echo -e "${REDCOLOR_BOLD}$*${ENDCOLOR}"
}

# BSD ls colors
export LSCOLORS=Ehfxcxdxbxegedabagacad

# Enable Pyenv in current shell
enable.pyenv() {
  [ -z "${PYENV_ROOT}" ] && export PYENV_ROOT="$HOME/.pyenv"
  [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
  ! command -v pyenv > /dev/null && error "Pyenv is not installed in your system" && return 1

  command -v pyenv > /dev/null && eval "$(pyenv init -)"
  command -v pyenv-virtualenv-init > /dev/null && eval "$(pyenv virtualenv-init -)"
  blue "Successfully loaded pyenv"
}

# Enable NVM in current shell
enable.npm() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

# re-source all aliases
alias alias.source='source ${HOME}/.bashrc && echo "Successfully sourced ${HOME}/.bashrc"'
alias bash.source='alias.source'

# Edit aliases fast -and reenable faster.
alias bash.edit='vim "${HOME}/.bash_profile" "${HOME}/.bashrc" && bash.source'
alias alias.edit='vim "${HOME}/.bash_local_aliases" "${HOME}/.bash_private_vars" && alias.source'

# exports entries in a key=value file
sys.export() {
  __SYS_EXPORT_DEBUG=
  [ ! -f "${1}" ] && \
    error "Error: ${1} is not a valid file"

  exported_lines=0
  ignored_lines=0
  while IFS= read -r line ; do
    key=$(echo "${line}" | cut -d'=' -f1 | tr -d ' ')
    [[ "$key" =~ ^#.* ]] && ignored_lines=$(( ignored_lines + 1 )) && echo "Ignoring '${line}'" && continue

    value=$(echo "${line}" | cut -d'=' -f2- | tr -d '"' | tr -d "'")
    value=$(eval echo "${value}") # in case it is an env var itself
    export "${key}=${value}" && exported_lines=$(( exported_lines + 1 )) && \
      [ -n "${__SYS_EXPORT_DEBUG}" ] && echo "${key}=${value}"
  done < "${1}"
  echo "Successfully exported ${exported_lines} items from ${1}, ignored ${ignored_lines}."
}

# kills anything similar to argument passed
sys.kill() {
  regex=$1
  while [ -n "${regex}" ] ; do
    pgrep "${regex}" | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
    shift
    regex=$1
  done
}

# Returns true if the current dir is a git repository
is.repo() {
  [ -n "$(git rev-parse \
    --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree \
    --short HEAD 2>/dev/null)" ]
}

# Report of disk space usage in current path
sys.disk_usage() {
  echo "Disk usage report for '$(pwd)':"
  for dir in $(\ls  -h .) ; do
    total=$(du -ch "$dir" | grep total | grep -E -o "[0-9]+[GM]")
    [ -n "${total}" ] && printf "* %-20s: %s\n" "$dir" "$total"
  done
}

# Find something similar to argument, from here downwards
sys.find() {
  local arg=$1
  shift
  [ -n "$*" ] && \
    echo "[WARNING] Ignoring extra input parameters: $*"
  find . -iname "*${arg}*"
}

# Rename a bunch of files
sys.renamer() {
  local where file_name file_dir
  where=${1:-.}
  for file in $(find "${where}" -type f -depth 1) ; do
    file_name="$(basename "$file")"
    file_dir="$(dirname "$file")"
    echo "Type in new name for ${file_name}? [Empty to ignore, \$ matches all]" && read -r new_name
    [ -z "${new_name}" ] && continue
    new_name="${new_name//\$/$file_name}"
    mv "${file_dir}/${file_name}" "${file_dir}/${new_name}"
  done
}

# Show a pretty error message
error() { red "[ERROR] $*" ; }

# 'Darwin' for Mac, 'Linux' or similar elsewhere
is.mac() { [[ $OSTYPE =~ darwin.* ]] ; }

is.debian() {
  command -v apt > /dev/null
}

is.arch() {
  command -v pacman > /dev/null
}

_get_bash_completion() {
  is.mac && echo "/usr/local/etc/bash_completion" || echo "/etc/bash_completion"
}

_despawn() {
  local service=$1
  local service_name="spawned_${service//\//_}"
  local ids=$(docker ps -a | grep "${service_name}" | awk '{print $1}')
  [ -n "$ids" ] && \
    printf "Killing old '%s': %s\n" "$1" "$(docker rm -f "${ids}")"
}

_spawn() {
  # Service name MUST match image name
  local service=$1
  local service_name="spawned_${service//\//_}"
  shift

  # ports and stuff
  #args=$*

  # first kill old one, if any
  _despawn "${service}" || true

  # And spawn a new service
  printf "Spawning new '%s': %s'\n" "${service}" "$(docker run -d --rm  --name "${service_name}" "$@" "$service")"
}


# Free some Docker disk space
docker.free_space() {
  green "Pruning all unused images with docker itself..."
  docker image prune -af
  exited_ps_before=$(docker ps -a -q  -f 'status=exited')
  exited_ps_before_count=$(echo "${exited_ps_before}" | grep -c -v ^$ )
  [ "${exited_ps_before_count}" -gt 0 ] && \
    echo "Deleting ${exited_ps_before_count}  containers with status 'Exited'..." && \
    docker rm -f "$(echo "${exited_ps_before}" | xargs)"

  dangling_images_before=$(docker images -q -a -f "dangling=true")
  dangling_images_before_count=$(echo "${dangling_images_before}" | grep -c -v ^$ )
  [ "${dangling_images_before_count}" -gt 0 ] && \
    echo "Deleting ${dangling_images_before_count} dangling images..." && \
    docker rmi -f "$(echo "${dangling_images_before}" | xargs)"

  # Delete volumes
  volumes=$(docker volume ls -q)
  [ -n "${volumes}" ] && \
    docker volume rm "${volumes}"
}

# Remove given line from file
sys.delete_line() {
  [ $# -ne 2 ] && echo "Usage: ${0} <line_to_delete> <file_name>" && return 1
  line_no=$1
  file=$2
  [ ! -f "${file}" ] && echo "File does not exist" && return 1
  [ "${line_no}" -gt "$(wc -l "${file}" | awk '{print $1}')" ] && echo "Line ${line_no} not found in file ${file}" && return 1

  sed -i -e "${line_no}d" "${file}"
}

# Remove given ~/.ssh/known_hosts line
ssh.delete_line() {
  [ $# -ne 1 ] && echo "Usage: ${0} <line_to_delete>" && return 1
  sys.delete_line "${1}" ~/.ssh/known_hosts
}


# Remove duplicated lines from input file into stdout
sys.duprm() {
  if [ "$#" -ne 1 ] ; then
    echo "Missing input file"
    return 1
  fi
  awk '!x[$0]++' "$1"
}

# Allows overriding of VIM commands
vim() {
  first_param=$1
  case "${first_param}" in
    checkout|commit|pull|push)
      command echo "Lo que tu quieres es el 'git', negro.... en fin... que el día que me muera...." && read -r
      command git "$@"
      ;;
    git*)
      shift;
      command echo "Casi seguro que se te fué la olla again, vamos a pasar del vim ese.... me muero y no te educo..."
      command git "$@" ;;
    vim)
      shift ; command vim "$@" ;;
    *)
      command vim "$@" ;;
  esac
}

_vim_branch_diff() {
  local name="${1:-develop}"
  branch_files=$(git diff "${name}" --name-only | xargs)
  [ -n "${branch_files}" ] && command vim ${branch_files} \
    || error "No changes between current branch and '${name}'"
}

# Open modified files between current branch and develop or master
vim.branch_diff.develop() { _vim_branch_diff "develop" ; }
vim.branch_diff.master() { _vim_branch_diff "master" ; }

# Edit files with merge conflicts in workspace
vim.conflicted() {
  modified_files=$(git status -s | grep '^\s*UU\s' | sed -E 's/^.*UU //g' | xargs)
  [ -n "${modified_files}" ] && command vim ${modified_files} \
    || error "No files with conflicts to edit"
}

# Edit current modified files in workspace
vim.modified() {
  modified_files=$(git status -s | grep '^\s*M\s' | sed -E 's/^.*M //g' | xargs)
  [ -n "${modified_files}" ] && command vim ${modified_files} \
    || error "No modified files to edit"
}

# Allows overriding GIT commands
git() {
  _get_repo_n_project() {
    remote="$1" ; [ -z "${remote}" ] && \
      remote=$(git remote get-url --push origin)
    if echo "${remote}" | grep -q "github.com" ; then
      _get_github_repo_n_project "$@"
    else
      _get_bb_repo_n_project "$@"
    fi
  }

  # Returns a two-item array!!
  _get_bb_repo_n_project() {
    repo_ssh="$1" ; [ -z "${repo_ssh}" ] && \
      repo_ssh="$(git remote get-url --push origin)"
    #echo "${repo_ssh}" | sed -Ee 's#.*\.com(:[0-9]*/|:|/)##g' -e 's#\.git$##g' | tr '/' ' '
    echo "${repo_ssh}" | sed -E 's#^.*:7999/(.*)/(.*).git#\1 \2#g'
  }

  _get_github_repo_n_project() {
    repo_ssh="$1" ; [ -z "${repo_ssh}" ] && \
      repo_ssh="$(git remote get-url --push origin)"
    echo "${repo_ssh}" | sed -E 's#^.*github.com[:/](.*)/(.*).git#\1 \2#g'
  }

  _get_repo_url() {
    repo_and_project=($( _get_repo_n_project "$1" ))
    remote="$1" ; [ -z "${remote}" ] && \
      remote=$(git remote get-url --push origin)
    if echo "${remote}" | grep -q "github.com" ; then
      printf "https://github.com/%s/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
    else
      printf "${BITBUCKET_REPO}/projects/%s/repos/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
    fi
  }

  _get_branch_name() {
    git rev-parse --abbrev-ref HEAD
  }

  case "$1" in
    help*)
      echo && command git --help && echo
      echo "Custom git commands:" && echo
      echo "  branchD   Delete all local, non-merged branches + unused remotes"
      echo "  perrete   Pushes current branchs and opens browser in the Pull Request page"
      echo "  pushete   Pushes current branch"
      echo "  open      Opens current repo's page in browser"
      echo "  klone     Clones given repo in ssh-format to ~/Stuff/<project>/<repo>"
      ;;
    blame*)
      echo "Probablemente tu, así que mejor no preguntes" ;;
    branchD*)
      git branch --no-color --merged | command grep -vE '(master|develop)' | command xargs -n 1 echo git branch -d
      git fetch -puta
      ;;
    perrete*)
      shift; target_branch=${1:-master}
      branch_name=$( _get_branch_name )
      command git push -u origin "${branch_name}"

      repo_and_project=($( _get_bb_repo_n_project ))
      project_url=$(printf "${BITBUCKET_REPO}/projects/%s/repos/%s/pull-requests" "${repo_and_project[0]}" "${repo_and_project[1]}")

      url_params=$(printf "create&targetBranch=refs/heads/%s&sourceBranch=refs/heads/%s" "${target_branch}" "${branch_name}")
      escaped_params=${url_params//\//%2F}

      final_url="${project_url}?${escaped_params}"
      sys.open "${final_url}"
      ;;
    pushete*)
      # pushes current branch and opens browser in repo webpage
      branch_name=$( _get_branch_name )
      [ -n "${branch_name}" ] && \
        command git push -u origin "${branch_name}" && git open
      ;;
    checkete*)
      # like checkout -b but parsing incoming text into a proper branch name
      shift; [ "${1}" == "-b" ] && shift;
      branch_name=$(echo "${@}" | sed -Ee 's/[[:space:]:]+/_/g' )
      command git checkout -b "${branch_name}"
      ;;
    git*)
      shift ; git "$@" ;;
    open*)
      shift ; project_url=$( _get_repo_url "$1" )
      sys.open "${project_url}"
      ;;
    klone*)
      shift; repo=$1 ; [ -z "${repo}" ] &&  \
        command git clone --help  && return
      parts=($( _get_repo_n_project "${repo}" ))
      target_dir="$HOME/Stuff/${parts[0]}/${parts[1]}"
      [ ! -d "${target_dir}" ] && command git clone "${repo}" "${target_dir}"
      cd "${target_dir}" || return
      ;;
    *)
      command git "$@" ;;
  esac
}

# Open AWS console for given tool, using currently logged-in profile
aws.open() {
  region="$(aws configure get region)"
  [ -z "${region}" ] && region="eu-west-1"
  sys.open "https://${region}.console.aws.amazon.com/${1}"
}

# Opens something - an URL, a file.... (OS-independent)
sys.open() {
  open_command=xdg-open ; is.mac && open_command=open
  "${open_command}" "$@"
}

# Thanks: http://stackoverflow.com/questions/10683349/forcing-bash-to-expand-variables-in-a-string-loaded-from-a-file
# Runs all the shell commands written in the given file
shell.expansion() {
  file="$1"
  [ ! -f "$file" ] && echo "Not a file: $file." && exit 1

  data=$(< "$file")
  delimiter="__apply_shell_expansion_delimiter__"
  command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
  eval "$command"
}

# Open Whatsapp web
web.whatsapp() {
  sys.open "https://web.whatsapp.com"
}

# Open Telegram web
web.telegram() {
  sys.open "https://web.telegram.org"
}

# URL Escape a string
web.escape() {
  ! command -v perl > /dev/null && error "PERL is not installed in your system" && return 1
  perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "${1}"
}

# Search for something from the commmand line
web.search() {
  engine="Duck Duck GO"
  base_url="https://duckduckgo.com/?q="
  search_string="$*"
  [ -z "${search_string}" ] && \
    error "I need something to search...." && return 1

  escaped_search_string=$( web.escape "${search_string}" )
  echo "Let's search for '${search_string}' using '${engine}'...."
  sys.open "${base_url}${escaped_search_string}"
}

# Perform a faster, recursive and case-ignoring 'grep' search on a GIT repo.
gg() {
  pattern=$1
  path="."
  if [ $# -gt 1 ] ; then
    shift
    path="$*"
  fi
  git grep -iI "$pattern" "$path" | sed -e 's#^\([^:]*\):\(.*\)$#\1 -> \2#g' | grep -iI "$pattern" --color
}

# mkdir -p + cd to newly created directory, in one go
mcd() {
  mkdir -p "$1"
  cd "$1" || true
}

# Typical shortcuts
! is.mac && alias ls='ls --color'
alias grep='grep --color'

# Fantastic when you are leaving the company and want to get all your job in one go
alias git.pull_all='for dir in $(find . -type d -maxdepth 1) ; do (cd $dir && is.repo && git pull) ; done || true'
alias git.clean_all='for dir in $(find . -type d -maxdepth 1) ; do (cd $dir && is.repo && git clean -dfx) ; done || true'
alias git.leaving_today='git.clean_all && git.pull_all && tar -cjvf /tmp/leaving_new_york_never_easy.bz2 . && mv /tmp/leaving_new_york_never_easy.bz2 . && printf "\n\nDone\nCopy \"leaving_new_york_never_easy.bz2\" somewhere and RUN. FAST\n\n"'

# so sweet
alias cd..='cd ..'

# Get you external IP fast
alias ip.mine='dig +short myip.opendns.com @resolver1.opendns.com'

# Get the owner of each branch, last commit and branch name
alias git.owners='is.repo && for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%an ---> %ai %ar" $branch | head -n 1` \\t$branch; done | sort -r'

# converters for files
alias sys.iso_to_utf='iconv --from-code=iso-8859-1 --to-code=utf-8'
alias sys.utf_to_iso='iconv --to-code=iso-8859-1 --from-code=utf-8'

# with X only, paste output of command into clipboard: echo 'AAA' | ccp
if is.mac ; then alias ccp='pbcopy' ; else alias ccp='xclip -selection clipboard' ; fi

# Copy current path to clipboard - needs 'ccp'
alias ccpath='pwd | ccp'

# OSX override of AWK, if installed
is.mac && [ -n "$(command -v gawk > /dev/null)" ] && alias awk='gawk'

# Pushes production, develop, and all tags in one go
alias super.push='git push origin prod  && git push --tags && git push origin develop'

# Starts/stops a local Datascience notebook:  https://github.com/jupyter/docker-stacks/tree/master/datascience-notebook
alias spawn.ds-notebook='_spawn jupyter/datascience-notebook -e JUPYTER_ENABLE_LAB=yes --workdir="/home/jovyan/work"  -v "$(pwd):/home/jovyan/work" -p 8888:8888 && sleep 3 && docker logs $(docker ps -l -q)'
alias despawn.ds-notebook='_despawn jupyter/datascience-notebook'

# Starts/stops a Jupyter notebook being run
alias spawn.notebook='_spawn jupyter/all-spark-notebook  -v "$(pwd):/home/jovyan/work" -p 8888:8888'
alias despawn.notebook='_despawn jupyter/all-spark-notebook'

# Starts/stops a local redis instance
alias spawn.redis='_spawn redis -p 6379:6379'
alias despawn.redis='_despawn redis'

# Starts/stops a memcached instance
alias spawn.memcached='_spawn memcached -p 11211:11211'
alias despawn.memcached='_despawn memcached'

# VIM aliases, for great justice
alias bim="echo 'LOL eres un mamón, es ''vi'' o ''vim'', no va con B... te lo paso por esta' && read && vim \$*"
alias vin="echo 'VIN?? 'Vin' qué, Diesel??? Madre mía, que paciencia...' && read && vim \$*"

# Random 32-char string
alias rand.str="cat /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1"

# Some bash-debugging help
debug.on() {
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
}

# Turn off SUPER VERBOSE bash-debugging help
alias debug.off='unset PS4'

# Run locally installed npm binaries
alias npm-exec='PATH=$(npm bin):$PATH'

# Sudo edit /etc/hosts
alias sys.hosts='sudo vim /etc/hosts'

# chdir to to a temporary location
alias cdtmp='cd "$(mktemp -d)"'

# ID of last container
alias docker.last='docker ps -l -q'

# various 'ls' aliases
alias ll='ls -lah'
alias la='ls -ah'

# curl + jq in one
jcurl() { curl -s -H 'Accept: application/json' "$@" | jq ; }

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
if command -v fzf >/dev/null ; then

  source ~/.fzf.bash || true

  # FZF Custom vars and functions
  FZF_DEFAULT_OPTS="--inline-info"
  FZF_DEFAULT_OPTS=${FZF_DEFAULT_OPTS}' --height 60%'
  FZF_COLOR="\
    --color=fg:#4d4d4c,bg:#eeeeee,hl:#d7005f \
    --color=fg+:#4d4d4c,bg+:#e8e8e8,hl+:#d7005f \
    --color=info:#4271ae,prompt:#8959a8,pointer:#d7005f \
    --color=marker:#4271ae,spinner:#4271ae,header:#4271ae\
  "
  export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} ${FZF_COLOR}"
  export FZF_DEFAULT_COMMAND="fd --type f  --color=auto -H"
  __FZF_PREVIEW_COMMAND() {
    fzf --preview 'fzf-preview.sh {}' --preview-window 'right,border-rounded,70%,<40(up,40%,border-bottom)'
  }

  # filetype-based handler
  __open() {
    [ -z "$1" ] && error "No file to open" && return
    file=${1/#\~\//$HOME/}
    [ -d "$file" ] && cd "$file" && return
    [ ! -f "$file" ] && error "$file is not a valid file"
    type="$(file --dereference --mime "$file")"
    if [[ ! $type =~ image/ ]] && [[ ! $type =~ =binary ]]; then vim "$file" ; else file "$file" ; fi
  }

  # time-based finders
  __finder() {
    $FZF_DEFAULT_COMMAND --changed-within "$1" . $HOME | __FZF_PREVIEW_COMMAND
  }
  alias c.h='__open $(__finder 1h)'
  alias c.d='__open $(__finder 1d)'
  alias c.w='__open $(__finder 7d)'
  alias c.m='__open $(__finder 30d)'

  __list_repos() {
    fd -H --maxdepth 2 --min-depth 2 --type d . "$_REPO_AUTOCOMPLETE_BASE_DIR/"
  }

  # Automagically autocomplete repo names and 'cd' into them. Needs a proper base repo dir. Depends on fzf and fd
  repo() {
    local regex
    base_dir="${_REPO_AUTOCOMPLETE_BASE_DIR}"
    [ -d "$*" ] && cd "$*" && return
    [ $# -gt 0 ] && regex=$(echo "$*" | sed -E 's# +#.*#g')
    [ "${regex}" != "" ] && [ -d "${base_dir}/${regex}" ] && cd "${base_dir}/${regex}" && return

    repo="$(__list_repos | grep -i "${regex}" | __FZF_PREVIEW_COMMAND)"
    if [ -z "${repo}" ] ; then error "No results" ; else cd "${repo}" ; fi
  }

  _repo() {
    _get_comp_words_by_ref cur prev

    base_dir="${_REPO_AUTOCOMPLETE_BASE_DIR}"
    [ "${prev}" = "repo" ] && prev=""
    regex="${prev} ${cur}"
    regex="${regex// /.*}"
    if [ -d "${base_dir}/${regex}" ] ; then
        COMPREPLY=$( compgen -W "${base_dir}/${regex}" )
    elif __list_repos | grep -iq "${regex}"  ; then
        COMPREPLY=$( compgen -W "$(fd --maxdepth 2 --type d . "${base_dir}" | grep -i "${regex}" | __FZF_PREVIEW_COMMAND)"  )
        #COMPREPLY=$( compgen -W "$(__list_repos | grep i "${regex}" | __FZF_PREVIEW_COMMAND)" )
    fi
  }
  complete -F _repo repo

  # git greps and offers vim to open a result
  ggrep() {
    [ -z "$1" ] && error "Cannot search nothing...."
    local matches

    matches=$(git grep -i "$@" | cut -d":" -f1 | sort -u | fzf.preview)
    [ -z "${matches}" ] && error "No matches for '$*'" && return
    vim +/"$1" "${matches}"
  }

  # git greps and opens all results
  gopen() {
    [ -z "$1" ] && error "Cannot search nothing...."

    local matches

    matches=$(git grep -i "$@" | cut -d":" -f1 | sort | xargs)
    [ -z "${matches}" ] && error "No matches for '$*'" && return
    vim +/"$1" ${matches}
  }

  # Vim + fzf
  fim() {
    local matches
    if [ $# -gt 0 ] ; then
      matches=$(fd --type file "$1" | __FZF_PREVIEW_COMMAND)
    else
      matches="$(__FZF_PREVIEW_COMMAND)"
    fi
    [ -n "${matches}" ] && vim "${matches}"
  }
fi

# Alias for awsume
alias awsume=". awsume"

#Auto-Complete function for AWSume
_awsume() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$(awsume-autocomplete)
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}
complete -F _awsume awsume

__pyenv_versions() {
  pyenv versions --bare --skip-aliases | grep -e '^\s*[23]\.' | cut -d '/' -f1 | sort -u | tr -d ' '
}

__envrc_assert() {
  [ ! -f .envrc ] && return 0
  [ -n "${__ENVRC_ALLOW_OVERWRITE}" ] && green ".envrc file already exists but __ENVRC_ALLOW_OVERWRITE is set" && return 0
  error ".envrc file already exists and __ENVRC_ALLOW_OVERWRITE is not set: refusing to overwrite" && return 1
}

# Enable a Pipenv-powered virtualenv via direnv
_pipenv_venv_create() {
  __envrc_assert || return
  [ ! -x "$(which pipenv)" ] && \
    error "PipEnv is not installed/available on current path" && return

  cat > .envrc << EOF
layout pipenv
unset PS1
EOF
  pipenv install
  direnv allow
  echo "[INFO] Successfully created direnv configuration for $(which pipenv)"
}
alias envrc.pipenv='_pipenv_venv_create'

# Enable a poetry-powered virtualenv via direnv
_poetry_venv_create() {
  __envrc_assert || return
  [ ! -x "$(which poetry)" ] && \
    error "Poetry is not installed/available on current path" && return
  cat > .envrc << EOF
layout poetry
unset PS1
EOF
  direnv allow
  echo "[INFO] Successfully created direnv configuration for $(which poetry)"
}
alias envrc.poetry='_poetry_venv_create'

# Enable a pyenv-powered virtualenv via direnv
_venv_create() {
  __envrc_assert || return
  version=$1
  enable.pyenv
  valid_versions="$(__pyenv_versions)"
  [ -z "$version" ] && error "No python version specified as parameter. Valid versions:\n${valid_versions}" && return
  [ -z "$(echo "${valid_versions}" | grep -o "${version}")" ] && \
    error "No valid Python version specified, choose one of:\n${valid_versions}" && return

  # Allow commands to choose the env name (Ansible commands, for example)
  base_name=$(basename "$(pwd)")
  pyenv="${2:-${base_name}}"

  pyenv local "${version}"
  cat > .envrc << EOF
pyversion=${version}
pvenv=${pyenv}

use python \${pyversion}
layout virtualenv \${pyversion} \${pvenv}
layout activate \${pvenv}-\${pyversion}
unset PS1
EOF
  direnv allow
  echo "[INFO] Successfully created virtualenv '${pyenv}' for Python ${version}, autoactivated via direnv"
}

alias envrc.venv='_venv_create'
_complete_venv_create() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$(__pyenv_versions)"
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}
complete -F _complete_venv_create envrc.venv

# proper release procedure with python and bumpversion
release.minor() {
  set -e
  [ -z "$(which bumpversion)" ] && error "Bumpversion not detected in PATH, exiting..."
  git checkout -b tmp
  bumpversion minor
  new_version=$(git log -1 --format="%s" | rev | cut -d' ' -f1 | rev | cut -d'.' -f1-2)
  git branch -M "release/${new_version}"
  git perrete
}

# move a list of files into backups of themselves
file.backup() {
  for _file in "$@" ; do
    [[ "${_file}" == *".bkp" ]] && \
      error "${_file} is already a .bkp file" && continue
    [ -f "${_file}" ] && \
      mv "${_file}" "${_file}.bkp" && echo "Backed up file into ${_file}.bkp"
  done
}

# undoes file.backup, restoring a list of backups into the original name
file.unbackup() {
  for _file in "$@" ; do
    [[ "${_file}" != *".bkp" ]] && \
      error "${_file} is not a .bkp file" && continue
    [ -f "${_file}" ] && \
      mv "${_file}" "${_file//.bkp}" && echo "Restored ${_file//.bkp}"
  done
}

# move downloaded torrent files into shared torrent directory
torrent.mv() {
  local torrent_dir="/Volumes/video/.torrents"
  [ ! -d "${torrent_dir}" ] && error "Shared folder ${torrent_dir} not available..."
  mv -v ~/Downloads/*.torrent "${torrent_dir}"
}

# enable ansible 2.x
alias ansible.enable.7='_ansible_enable 7.0 7.0.0'
alias ansible.enable.4.0='_ansible_enable 4.0 4.0.0a4'
alias ansible.enable.29='_ansible_enable 2.9 2.9.20'
_ansible_enable() {
  local ansible_version pip_version
  ansible_version=$1
  pyenv_name="ansible-${ansible_version}"
  pip_version="${2:-${ansible_version}.0}"

  #echo "[INFO] Venv for Ansible ${ansible_version} not found, creating a new one now..."
  enable.pyenv
  python_version="$(pyenv versions | grep -e '^\s*[23]\.' | cut -d '/' -f1 | sort -u | tr -d ' ' | head -1)"
  envrc.venv "${python_version}" "${pyenv_name}"

  # delete old versions, if any
  grep -v 'ansible==' requirements.txt > tmp
  echo "ansible==${pip_version}" >> tmp && mv tmp requirements.txt
  pip install -r requirements.txt
}

# disable Ansible
alias ansible.disable='deactivate'

# Flush DNS
is.mac && alias dns.flush='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'

# GIT completion, among others ('brew install bash-completion')
#is.mac && [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
is.mac && [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

# local brew openforti
#alias openforti="~/.homebrew/opt/openfortivpn/bin/openfortivpn -c ~/.homebrew/etc/openfortivpn/openfortivpn/config"

# MacVIM's own vim
#alias vim="~/Applications/MacVim.app/Contents/MacOS/Vim"
alias vi='vim'

# Useful for everything: bash, git, postgres...
export EDITOR=vim
export VISUAL_EDITOR=vim
export PSQL_EDITOR='vim -c"set syntax=sql"'

