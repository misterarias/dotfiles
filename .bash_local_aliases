#!/bin/bash
# shellcheck source=/dev/null disable=2155 disable=2207 disable=2142
# vi: ft=sh ts=2 sw=2

# functions and aliases, loaded on session start.
# By using meaningful one-line comments to functions, they'll get nicely printed
# by means of the 'my_commands' help function (defined in ~/.bashrc)

BOLD=$(tput bold)
BLUECOLOR=$(tput setaf 4)
REDCOLOR=$(tput setaf 1)
GREENCOLOR=$(tput setaf 2)
BLUECOLOR_BOLD=$BLUECOLOR$BOLD
REDCOLOR_BOLD=$REDCOLOR$BOLD
GREENCOLOR_BOLD=$GREENCOLOR$BOLD
ENDCOLOR=$(tput sgr0)

green() {
  echo -e "${GREENCOLOR_BOLD}$*${ENDCOLOR}"
}

blue() {
  echo -e "${BLUECOLOR_BOLD}$*${ENDCOLOR}"
}

red() {
  echo -e "${REDCOLOR_BOLD}$*${ENDCOLOR}"
}

# BSD ls colors
export LSCOLORS=Ehfxcxdxbxegedabagacad

# Enable Pyenv in current shell
enable.pyenv() {

  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  if ! command -v pyenv > /dev/null ; then
    error "Pyenv is not installed in your system"
    return
  fi

  # shellcheck disable=2317
  _pyenv_lazyload() {
    [ -n "${_PYENV_LAZYLOAD}" ] && return
    export _PYENV_LAZYLOAD=1
    unalias pyenv

    #eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    #eval "$(pyenv virtualenv-init -)"
  }

  ## Alias pyenv to the lazy loader
  alias pyenv="_pyenv_lazyload; pyenv"
}

enable.sdkman() {
[ ! -d "$HOME/.sdkman" ] && echo "SDKMAN not installed in your system" && return

  # shellcheck disable=2317
  _lazyload_sdk() {
    [ -n "${_SDK_LAZY_LOAD}" ] && return
    export _SDK_LAZY_LOAD=1
    unalias sdk
    export SDKMAN_DIR="$HOME/.sdkman"
    source "${SDKMAN_DIR}/bin/sdkman-init.sh"
  }

  alias sdk='_lazyload_sdk; sdk'
}

# Enable NVM in current shell
enable.npm() {

# shellcheck disable=2317
_nvm_lazyload() {
  [ -n "${__NVM_LAZYLOAD}" ] && return
  export __NVM_LAZYLOAD=1

  unalias nvm
  unalias npm
  unalias node
  unalias vim

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"

  # Optionally load bash_completion only when required
  if [ -n "$BASH_COMPLETION" ] && [ -s "$NVM_DIR/bash_completion" ]; then
    . "$NVM_DIR/bash_completion"
  fi
}

alias nvm="_nvm_lazyload; nvm"
alias npm="_nvm_lazyload; npm"
alias node="_nvm_lazyload; node"

# TODO: Find something better than this crap
alias vim='_nvm_lazyload; vim'
}

# re-source all aliases
alias bash.reload='source ${HOME}/.bashrc'

# Edit aliases fast -and reenable faster.
alias bash.edit='vim "${HOME}/.bashrc" && bash.reload'
alias alias.edit='vim -O "${HOME}/.bash_local_aliases" "${HOME}/.bash_private_vars" && bash.reload'

# exports entries in a key=value file
sys.export() {
  __SYS_EXPORT_DEBUG=
  [ ! -f "${1}" ] && \
    error "Error: ${1} is not a valid file"

  exported_lines=0
  ignored_lines=0
  while IFS= read -r line ; do
    key=$(echo "${line}" | cut -d'=' -f1 | tr -d ' ')
    [[ "$key" =~ ^#.* ]] && ignored_lines=$(( ignored_lines + 1 )) && echo "Ignoring '${key}'" && continue

    value=$(echo "${line}" | cut -d'=' -f2- | tr -d '"' | tr -d "'")
    value=$(eval echo "${value}") # in case it is an env var itself
    export "${key}=${value}" && exported_lines=$(( exported_lines + 1 )) && \
      [ -n "${__SYS_EXPORT_DEBUG}" ] && echo "${key}=${value}"
  done < "${1}"
  echo "Successfully exported ${exported_lines} items from ${1}, ignored ${ignored_lines}."
}

# kills anything similar to argument passed
sys.kill() {
  regex=$1
  while [ -n "${regex}" ] ; do
    pgrep "${regex}" | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
    shift
    regex=$1
  done
}

# Show a pretty error message
error() { red "[ERROR] $*" ; }

# 'Darwin' for Mac, 'Linux' or similar elsewhere
is.mac() { [ "$(uname)" == "Darwin" ] ; }
is.debian() { [ "$(uname)" == "Linux" ] && [ -f /etc/debian_version ] ; }
is.arch() { [ "$(uname)" == "Linux" ] && [ -f /etc/arch-release ] ; }

# Free some Docker disk space
docker.free_space() {
  green "Pruning all unused images with docker itself..."
  docker image prune -af
  exited_ps_before=$(docker ps -a -q  -f 'status=exited')
  exited_ps_before_count=$(echo "${exited_ps_before}" | grep -c -v ^$ )
  [ "${exited_ps_before_count}" -gt 0 ] && \
    echo "Deleting ${exited_ps_before_count}  containers with status 'Exited'..." && \
    docker rm -f "$(echo "${exited_ps_before}" | xargs)"

  dangling_images_before=$(docker images -q -a -f "dangling=true")
  dangling_images_before_count=$(echo "${dangling_images_before}" | grep -c -v ^$ )
  [ "${dangling_images_before_count}" -gt 0 ] && \
    echo "Deleting ${dangling_images_before_count} dangling images..." && \
    docker rmi -f "$(echo "${dangling_images_before}" | xargs)"

    # Delete volumes
    volumes=$(docker volume ls -q)
    [ -n "${volumes}" ] && \
      docker volume rm "${volumes}"
    }

# Remove given line from file
sys.delete_line() {
  [ $# -ne 2 ] && echo "Usage: ${0} <line_to_delete> <file_name>" && return 1
  line_no=$1
  file=$2
  [ ! -f "${file}" ] && echo "File does not exist" && return 1
  [ "${line_no}" -gt "$(wc -l "${file}" | awk '{print $1}')" ] && echo "Line ${line_no} not found in file ${file}" && return 1

  sed -i -e "${line_no}d" "${file}"
}

# Remove given ~/.ssh/known_hosts line
ssh.delete_line() {
  [ $# -ne 1 ] && echo "Usage: ${0} <line_to_delete>" && return 1
  sys.delete_line "${1}" ~/.ssh/known_hosts
}


# Remove duplicated lines from input file into stdout
sys.duprm() {
  if [ "$#" -ne 1 ] ; then
    echo "Missing input file"
    return 1
  fi
  awk '!x[$0]++' "$1"
}

# Allows overriding of VIM commands
vim() {
  first_param=$1
  case "${first_param}" in
    checkout|commit|pull|push)
      command echo "Lo que tu quieres es el 'git', negro.... en fin... que el día que me muera...." && read -r
      command git "$@"
      ;;
    git\ *)
      shift;
      command echo "Casi seguro que se te fué la olla again, vamos a pasar del vim ese.... me muero y no te educo..."
      command git "$@" ;;
    vim)
      shift ; command vim "$@" ;;
    *)
      command vim "$@" ;;
  esac
}

_vim_branch_diff() {
  local name="${1:-develop}"
  branch_files=$(git diff "${name}" --name-only | xargs)
  if [ -n "${branch_files}" ] ; then
    command vim "${branch_files}"
  else
    error "No changes between current branch and '${name}'"
  fi
}

# Open modified files between current branch and develop or master
vim.branch_diff.develop() { _vim_branch_diff "develop" ; }
vim.branch_diff.master() { _vim_branch_diff "master" ; }
vim.branch_diff.main() { _vim_branch_diff "main" ; }

# Edit files with merge conflicts in workspace
vim.conflicted() {
  modified_files=$(git status -s | grep '^\s*UU\s' | sed -E 's/^.*UU //g' | xargs)
  if [ -n "${modified_files}" ] ; then
    command vim "${modified_files}"
  else
    error "No files with conflicts to edit"
  fi
}

# Edit current modified files in workspace
vim.modified() {
  modified_files=$(git status -s | grep '^\s*M\s' | sed -E 's/^.*M //g' | xargs)
  if [ -n "${modified_files}" ] ; then
    command vim "${modified_files}"
  else
    error "No modified files to edit"
  fi
}

# Allows overriding GIT commands
git() {
  _get_repo_n_project() {
    remote="$1" ; [ -z "${remote}" ] && \
      remote=$(git remote get-url --push origin)
    if echo "${remote}" | grep -q ".ghe.com" ; then
      _get_ghe_repo_n_project "$@"
    elif echo "${remote}" | grep -q "github.com" ; then
      _get_github_repo_n_project "$@"
    elif echo "${remote}" | grep -q "bitbucket" ; then
      _get_bb_repo_n_project "$@"
    else
      error "Unsupported clone URL: ${remote}" && exit 1
    fi
  }

_get_ghe_repo_n_project() {
  repo_url="$1" ; [ -z "${repo_url}" ] && \
    repo_url="$(git remote get-url --push origin)"
  echo "${repo_url}" | sed "s/.*ghe.com.\(.*\)/\(.*\)\.git/\1 \2/"
}

# Returns a two-item array!!
_get_bb_repo_n_project() {
  repo_url="$1" ; [ -z "${repo_url}" ] && \
    repo_url="$(git remote get-url --push origin)"
  if echo "${repo_url}" | grep -q "https://" ; then
    echo "${repo_url}" | sed -E 's#.*scm/\(.*\)/\(.*\)\.git#\1 \2#'
  elif echo "${repo_url}" | grep -q "ssh://" ; then
    echo "${repo_url}" | sed -E 's#^.*:7999/(.*)/(.*).git#\1 \2#g'
  fi
}

_get_github_repo_n_project() {
  repo_url="$1" ; [ -z "${repo_url}" ] && \
    repo_url="$(git remote get-url --push origin)"
  if echo "${repo_url}" | grep -q "https://" ; then
    echo "${repo_url}" | sed -E 's#.*scm/\(.*\)/\(.*\)\.git#\1 \2#'
  elif echo "${repo_url}" | grep -q "ssh://" ; then
    echo "${repo_url}" | sed -E 's#^.*github.com[:/](.*)/(.*).git#\1 \2#g'
  fi
}

_get_repo_url() {
  repo_and_project=($( _get_repo_n_project ))
  remote=$(git remote get-url --push origin)
  if echo "${remote}" | grep -q "github.com" ; then
    printf "https://github.com/%s/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
  else
    printf "${BITBUCKET_REPO}/projects/%s/repos/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
  fi
}

_get_browse_url() {
  vcs_url=$(_get_repo_url)
  file=$1
  if echo "${remote}" | grep -q "github.com" ; then
    error "Not implemented for Github yet"
  else
    printf "${vcs_url}/browse/%s" "${file}"
  fi
}

_get_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

case "$1" in
  help*)
    echo && command git --help && echo
    echo "Custom git commands:" && echo
    echo "  perrete   Pushes current branchs and opens browser in the Pull Request page"
    echo "  pushete   Pushes current branch"
    echo "  open      Opens current repo's page in browser"
    echo "  klone     Clones given repo in ssh-format to ~/Stuff/<project>/<repo>"
    ;;
  perrete*)
    shift; target_branch=${1:-master}
    branch_name=$( _get_branch_name )
    command git push -u origin "${branch_name}"

    repo_and_project=($( _get_bb_repo_n_project ))
    project_url=$(printf "${BITBUCKET_REPO}/projects/%s/repos/%s/pull-requests" "${repo_and_project[0]}" "${repo_and_project[1]}")

    url_params=$(printf "create&targetBranch=refs/heads/%s&sourceBranch=refs/heads/%s" "${target_branch}" "${branch_name}")
    escaped_params=${url_params//\//%2F}

    final_url="${project_url}?${escaped_params}"
    sys.open "${final_url}"
    ;;
  pushete*)
    # pushes current branch and opens browser in repo webpage
    branch_name=$( _get_branch_name )
    [ -n "${branch_name}" ] && \
      command git push -u origin "${branch_name}" && git open
    ;;
  checkete*)
    # like checkout -b but parsing incoming text into a proper branch name
    shift; [ "${1}" == "-b" ] && shift;
    branch_name=$(echo "${@}" | sed -Ee 's/[[:space:]:]+/_/g' )
    command git checkout -b "${branch_name}"
    ;;
  git*)
    shift ; git "$@" ;;
  open*)
    shift ;
    [ -n "$1" ] && sys.open "$( _get_browse_url "$1" )" && return
    sys.open "$( _get_repo_url )"
    ;;
  klone*)
    shift; repo=$1 ; [ -z "${repo}" ] &&  \
      command git clone --help  && return
    parts=($( _get_repo_n_project "${repo}" ))
    target_dir="$HOME/Stuff/${parts[0]}/${parts[1]}"
    [ ! -d "${target_dir}" ] && command git clone "${repo}" "${target_dir}"
    cd "${target_dir}" || return
    ;;
  branch*)
    shift
    if [ -n "${1}" ] ; then
      command git branch "$@"
    else
      branch=$(git brs)
      [ -n "${branch}" ] && command git checkout "$branch"
    fi
    ;;
  *)
    command git "$@" ;;
esac
}

# Open AWS console for given tool, using currently logged-in profile
aws.open() {
  region="$(aws configure get region)"
  [ -z "${region}" ] && region="eu-west-1"
  sys.open "https://${region}.console.aws.amazon.com/${1}"
}

# Opens something - an URL, a file.... (OS-independent)
sys.open() {
  open_command=xdg-open ; is.mac && open_command=open
  # check for wsl-open in WSL
  [ -n "$(command -v wsl-open)" ] && open_command=wsl-open
  "${open_command}" "$@"
}

# Thanks: http://stackoverflow.com/questions/10683349/forcing-bash-to-expand-variables-in-a-string-loaded-from-a-file
# Runs all the shell commands written in the given file
shell.expansion() {
  file="$1"
  [ ! -f "$file" ] && echo "Not a file: $file." && exit 1

  data=$(< "$file")
  delimiter="__apply_shell_expansion_delimiter__"
  command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
  eval "$command"
}

# Open Whatsapp web
web.whatsapp() {
  sys.open "https://web.whatsapp.com"
}

# Search for something from the commmand line
q() {
  engine="Duck Duck GO"
  base_url="https://duckduckgo.com/?q="
  search_string="$*"
  [ -z "${search_string}" ] && \
    error "I need something to search...." && return 1

  escaped_search_string=$( web.escape "${search_string}" )
  echo "Let's search for '${search_string}' using '${engine}'...."
  sys.open "${base_url}${escaped_search_string}"
}

# Perform a faster, recursive and case-ignoring 'grep' search on a GIT repo.
gg() {
  pattern=$1
  path="."
  if [ $# -gt 1 ] ; then
    shift
    path="$*"
  fi
  git grep -iI "$pattern" "$path" | sed -e 's#^\([^:]*\):\(.*\)$#\1 -> \2#g' | grep -iI "$pattern" --color
}

# mkdir -p + cd to newly created directory, in one go
mcd() {
  mkdir -p "$1"
  cd "$1" || true
}

# Typical shortcuts
! is.mac && alias ls='ls --color'
alias grep='grep --color'

# Get you external IP fast
alias ip.mine='dig +short myip.opendns.com @resolver1.opendns.com'

# with X only, paste output of command into clipboard: echo 'AAA' | ccp
if is.mac ; then alias ccp='pbcopy' ; else alias ccp='xclip -selection clipboard' ; fi

# OSX override of AWK, if installed
is.mac && [ -n "$(command -v gawk > /dev/null)" ] && alias awk='gawk'

# VIM aliases, for great justice
alias bim="echo 'LOL eres un mamón, es ''vi'' o ''vim'', no va con B... te lo paso por esta' && read && vim \$*"
alias vin="echo 'VIN?? 'Vin' qué, Diesel??? Madre mía, que paciencia...' && read && vim \$*"

# Some bash-debugging help
debug.on() {
  PS4='$(date "+%s.%N")\011 '
  export PS4="+${PS4}(${BASH_SOURCE[0]}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }"
}

# Turn off SUPER VERBOSE bash-debugging help
alias debug.off='unset PS4'

# Sudo edit /etc/hosts
alias sys.hosts='sudo vim /etc/hosts'

# chdir to to a temporary location
alias cdtmp='cd "$(mktemp -d)"'

# various 'ls' aliases
alias ll='ls -lah'
alias la='ls -ah'

# curl + jq in one
jcurl() { curl -s -H 'Accept: application/json' "$@" | jq ; }

# Alias for awsume
alias awsume=". awsume"

#Auto-Complete function for AWSume
_awsume() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=$(awsume-autocomplete)
  COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
  return 0
}
complete -F _awsume awsume

__pyenv_versions() {
  pyenv versions --bare --skip-aliases | grep -e '^\s*[23]\.' | cut -d '/' -f1 | sort -u | tr -d ' '
}

__envrc_assert() {
  [ ! -f .envrc ] && return 0
  [ -n "${__ENVRC_ALLOW_OVERWRITE}" ] && green ".envrc file already exists but __ENVRC_ALLOW_OVERWRITE is set" && return 0
  error ".envrc file already exists and __ENVRC_ALLOW_OVERWRITE is not set: refusing to overwrite" && return 1
}

# Enable a Pipenv-powered virtualenv via direnv
_pipenv_venv_create() {
  __envrc_assert || return
  [ ! -x "$(which pipenv)" ] && \
    error "PipEnv is not installed/available on current path" && return

  cat > .envrc << EOF
layout pipenv
unset PS1
EOF
pipenv install
direnv allow
echo "[INFO] Successfully created direnv configuration for $(which pipenv)"
}
alias envrc.pipenv='_pipenv_venv_create'

# Enable a poetry-powered virtualenv via direnv
_poetry_venv_create() {
  __envrc_assert || return
  [ ! -x "$(which poetry)" ] && \
    error "Poetry is not installed/available on current path" && return
  cat > .envrc << EOF
layout poetry
unset PS1
EOF
direnv allow
echo "[INFO] Successfully created direnv configuration for $(which poetry)"
}
alias envrc.poetry='_poetry_venv_create'

# Enable a pyenv-powered virtualenv via direnv
_venv_create() {
  __envrc_assert || return
  version=$1
  enable.pyenv
  valid_versions="$(__pyenv_versions)"
  [ -z "$version" ] && error "No python version specified as parameter. Valid versions:\n${valid_versions}" && return
  if ! echo "${valid_versions}" | grep -q -o "${version}" ; then
    error "No valid Python version specified, choose one of:\n${valid_versions}" && return
  fi

  # Allow commands to choose the env name (Ansible commands, for example)
  base_name=$(basename "$(pwd)")
  pyenv="${2:-${base_name}}"

  pyenv local "${version}"
  cat > .envrc << EOF
pyversion=${version}
pvenv=${pyenv}

use python \${pyversion}
layout virtualenv \${pyversion} \${pvenv}
layout activate \${pvenv}-\${pyversion}
unset PS1
EOF
direnv allow
echo "[INFO] Successfully created virtualenv '${pyenv}' for Python ${version}, autoactivated via direnv"
}

alias envrc.venv='_venv_create'
_complete_venv_create() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="$(__pyenv_versions)"
  COMPREPLY=( $(compgen -W ${opts} -- ${cur}) )
  return 0
}
complete -F _complete_venv_create envrc.venv

# proper release procedure with python and bumpversion
release.minor() {
  set -e
  [ -z "$(which bumpversion)" ] && error "Bumpversion not detected in PATH, exiting..."
  git checkout -b tmp
  bumpversion minor
  new_version=$(git log -1 --format="%s" | rev | cut -d' ' -f1 | rev | cut -d'.' -f1-2)
  git branch -M "release/${new_version}"
  git perrete
}

# move a list of files into backups of themselves
file.backup() {
  for _file in "$@" ; do
    [[ "${_file}" == *".bkp" ]] && \
      error "${_file} is already a .bkp file" && continue
    [ -f "${_file}" ] && \
      mv "${_file}" "${_file}.bkp" && echo "Backed up file into ${_file}.bkp"
    done
  }

# undoes file.backup, restoring a list of backups into the original name
file.unbackup() {
  for _file in "$@" ; do
    [[ "${_file}" != *".bkp" ]] && \
      error "${_file} is not a .bkp file" && continue
    [ -f "${_file}" ] && \
      mv "${_file}" "${_file//.bkp}" && echo "Restored ${_file//.bkp}"
    done
  }

# installs Ipython and dependencies
__verify_ipython() {
  local pip_command="pipx"
  [ -n "${VIRTUAL_ENV}" ] && pip_command="pip"
  package_list=(ipython pandas openpyxl)
  missing_packages=$($pip_command show "${package_list[@]}" 2>&1 | grep -o "not found.*" | cut -d ':' -f2 | tr -d ',')
  [ -n "${missing_packages}" ] && echo "Installing IPython and dependencies..." && \
    $pip_command install "${missing_packages}"
  }

# open ipython with preloaded file
df.load() {
  # Check if a file argument is provided
  local file="$1"
  if [ -z "$file" ]; then
    echo "Usage: load_df <file>"
    return 1
  fi

  # check if ipython is installed, along with pandas and openpyxl
  __verify_ipython

  local ipython_cmd=""
  if [[ "$file" == *.csv ]]; then
    ipython_cmd="import pandas as pd; df = pd.read_csv('$file'); print('CSV $file loaded as df')"
  elif [[ "$file" == *.xlsx ]]; then
    ipython_cmd="import pandas as pd; df = pd.read_excel('$file'); print('Excel $file loaded as df')"
  elif [[ "$file" == *.pkz ]]; then
    ipython_cmd="import pandas as pd; df = pd.read_pickle('$file', compression='bz2'); print('Pickle $file loaded as df')"
  else
    echo "Unsupported file type"
    return 1
  fi

  # Open IPython and load the dataframe
  ipython -i -c "$ipython_cmd"
}

# shellcheck disable=2317
enable.fzf() {

  export PATH="$HOME/.fzf/bin:$PATH"
  [ -f ~/.fzf.bash ] && source ~/.fzf.bash

  # FZF Custom vars and functions
  _USE_FZF_CUSTOM_THEME=
  if [ "${_USE_FZF_CUSTOM_THEME}" = "1" ] ; then
    FZF_OPTS="--layout=reverse"
    FZF_OPTS="${FZF_OPTS} --info=hidden"
    FZF_OPTS="${FZF_OPTS} --height=60%"
    FZF_BORDER="--border=none --margin=0,1"
    FZF_COLOR="\
      --color=dark \
      --color=preview-bg:#e8e8e8 \
      "
  else
    FZF_COLOR=""
    FZF_BORDER=""
    FZF_OPTS="--style full"
  fi
  export FZF_DEFAULT_OPTS="${FZF_OPTS} ${FZF_COLOR} ${FZF_BORDER}"

  export FZF_DEFAULT_COMMAND="fd --type f  --color=auto -H"
  # shellcheck disable=2317
  __FZF_PREVIEW_COMMAND() {
    fzf $FZF_DEFAULT_OPTS --preview 'fzf-preview.sh {}'
    #fzf --style default  --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'
    #fzf $FZF_DEFAULT_OPTS --preview 'fzf-preview.sh {}' --preview-window 'right,border-none,60%,<70(bottom,60%,border-top)'
  }

  # filetype-based handler
  # shellcheck disable=2317
  __open() {
    [ -z "$1" ] && error "No file to open" && return
    file=${1/#\~\//$HOME/}
    [ -d "$file" ] && cd "$file" && return
    [ ! -f "$file" ] && error "$file is not a valid file"
    type="$(file --dereference --mime "$file")"
    if [[ ! $type =~ image/ ]] && [[ ! $type =~ =binary ]]; then vim "$file" ; else file "$file" ; fi
  }

  # time-based finders
  # shellcheck disable=2317
  __finder() {
    $FZF_DEFAULT_COMMAND --changed-within "$1" . "$HOME" | __FZF_PREVIEW_COMMAND
  }
  alias c.h='__open $(__finder 1h)'
  alias c.d='__open $(__finder 1d)'
  alias c.w='__open $(__finder 7d)'
  alias c.m='__open $(__finder 30d)'

  # shellcheck disable=2317
  __list_repos() {
    fd  --maxdepth 2 --min-depth 2 --type d . "$_REPO_AUTOCOMPLETE_BASE_DIR/"
  }

  # Automagically autocomplete repo names and 'cd' into them. Needs a proper base repo dir. Depends on fzf and fd
  # shellcheck disable=2317
  r() {
    local regex
    base_dir="${_REPO_AUTOCOMPLETE_BASE_DIR}"
    [ -d "$*" ] && cd "$*" && return
    [ $# -gt 0 ] && regex=$(echo "$*" | sed -E 's# +#.*#g')
    [ "${regex}" != "" ] && [ -d "${base_dir}/${regex}" ] && cd "${base_dir}/${regex}" && return

    repo="$(__list_repos | grep -i "${regex}" | __FZF_PREVIEW_COMMAND)"
    [ -z "${repo}" ] && error "No results" && return
    #repo="$(__list_repos | grep -i "${regex}" | fzf --preview 'fzf-preview.sh {}/README.md')"
    if [ -z "${repo}" ] ; then error "No results" ; else cd "${repo}" ; fi
  }

  # shellcheck disable=2317
  _repo() {
    _get_comp_words_by_ref cur prev

    base_dir="${_REPO_AUTOCOMPLETE_BASE_DIR}"
    [ "${prev}" = "repo" ] && prev=""
    regex="${prev} ${cur}"
    regex="${regex// /.*}"
    if [ -d "${base_dir}/${regex}" ] ; then
      COMPREPLY=$( compgen -W "${base_dir}/${regex}" )
    elif __list_repos | grep -iq "${regex}"  ; then
      COMPREPLY=$( compgen -W "$(fd --maxdepth 2 --type d . "${base_dir}" | grep -i "${regex}" | __FZF_PREVIEW_COMMAND)"  )
    fi
  }
  complete -F _repo r

  # git greps and offers vim to open a result
  ggrep() {
    [ -z "$1" ] && error "Cannot search nothing...."
    local matches

    matches=$(git grep -i "$@" | cut -d":" -f1 | sort -u | __FZF_PREVIEW_COMMAND)
    [ -z "${matches}" ] && error "No matches for '$*'" && return
    vim +/"$1" "${matches}"
  }

  # Vim + fzf
  fim() {
    local matches
    if [ $# -gt 0 ] ; then
      matches=$(fd --hidden --type file | grep -i "$1" | __FZF_PREVIEW_COMMAND)
    else
      matches="$(__FZF_PREVIEW_COMMAND)"
    fi
    [ -n "${matches}" ] && vim "${matches}"
  }
}

alias vi='vim'

# Useful for everything: bash, git, postgres...
export EDITOR=vim
export VISUAL_EDITOR=vim
export PSQL_EDITOR='vim -c"set syntax=sql"'

# Edit ~/.ssh/config
alias ssh.edit='vim ~/.ssh/config'

# Add this AFTER any prompt-manipulating extensions: https://direnv.net/docs/hook.html
_direnv_hook() {
  local previous_exit_status=$?;
  direnv_out=$(direnv export bash)
  if [[ -n $direnv_out ]]; then
    eval "$direnv_out"
  fi
  return $previous_exit_status
}

if ! [[ "${PROMPT_COMMAND:-}" =~ _direnv_hook ]]; then
  PROMPT_COMMAND="_direnv_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi

# bash autocompletion
if is.debian ; then
  source /etc/bash_completion
elif is.mac ; then
  source /opt/homebrew/etc/profile.d/bash_completion.sh
fi

# git autocompletion
source ~/.git-completion.bash

# Private stuff, depends on laptop, never to be shared or versioned
[ -f ~/.bash_private_vars ] && . ~/.bash_private_vars || true
